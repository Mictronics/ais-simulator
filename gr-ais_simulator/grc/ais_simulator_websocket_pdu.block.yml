id: ais_simulator_websocket_pdu
label: Websocket PDU
category: '[AIS Simulator]'

templates:
  imports: import ais_simulator
  make: ais_simulator.websocket_pdu(${addr}, ${port})

#  Make one 'parameters' list entry for every parameter you want settable from the GUI.
#     Keys include:
#     * id (makes the value accessible as \$keyname, e.g. in the make entry)
#     * label (label shown in the GUI)
#     * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
parameters:
  - id: addr
    label: Listen Address
    dtype: string
  - id: port
    label: Port
    dtype: string
    default: '52002'

#  Make one 'inputs' list entry per input and one 'outputs' list entry per output.
#  Keys include:
#      * label (an identifier for the GUI)
#      * domain (optional - stream or message. Default is stream)
#      * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
#      * vlen (optional - data stream vector length. Default is 1)
#      * optional (optional - set to 1 for optional inputs. Default is 0)
inputs:
  - domain: message
    id: in
    optional: true

outputs:
  - domain: message
    id: out
    optional: true

documentation: |-
  This block runs a websocket server on given address and port.
  Strings send via websocket message are transformed into PDU messages and published
  on the output port. Each PDU message includes meta data with a length key and length
  of the string as value.

  Leave listen address blank to bind to all interfaces (equivalent to 0.0.0.0).

#  'file_format' specifies the version of the GRC yml format used in the file
#  and should usually not be changed.
file_format: 1
